在Linux/Unix系统中，可以在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：
#! /usr/bin/env python3.4
在交互模式中，最后被输出的表达式结果被赋值给变量 _ 。
print('What is your {0}?  It is {1}.'.format(q, a)) #输出参数
reversed（list）反向遍历一个序列
sorted（list）返回一个已排序的序列，并不修改原序列！！

多行注释用三个单引号（'''）或者三个双引号（"""）将注释括起来，例如:
单引号（'''）
#!/usr/bin/python3 
'''
这是多行注释，用三个单引号
这是多行注释，用三个单引号 
这是多行注释，用三个单引号
'''
print("Hello, World!") 

多个变量赋值：
>>> a,b=1.2 即为 a=1,b=2
>>> a,b=b,a #交换值

Numbers（数字）4种类型
>>> a, b, c, d = 20, 5.5, True, 4+3j
>>> print(type(a), type(b), type(c), type(d))
<class 'int'> <class 'float'> <class 'bool'> <class 'complex'>
特殊运算：
>>> 2 / 4  # 除法，得到一个浮点数
0.5
>>> 2 // 4 # 除法，得到一个整数
0
>>> 2 ** 5 # 乘方
32

Python中的字符串str用单引号(' ')或双引号(" ")括起来，同时使用反斜杠(\)转义特殊字符，字符串不可改变
>>> print(r'C:\some\name') #r不转义
C:\some\name
>>> print('str'+'ing', 'my'*3) #字符串连接，字符串重复
string mymymy
>>> word = 'Python'
>>> print(word[0], word[5]) #字符串索引，从左到右
P n
>>> print(word[-1], word[-6]) #从右到左
n P
>>> word = 'ilovepython' #切片
>>> word[1:5]
'love'
>>> s = 'First line.\nSecond line.'  # \n 意味着新行
>>> s  # 不使用 print(), \n 包含在输出中
'First line.\nSecond line.'
>>> print(s)  # 使用 print(), \n 输出一个新行
First line.
Second line.

List（列表）
写在方括号之间、用逗号分隔开的数值列表。列表内的项目不必全是相同的类型.
像字符串一样，列表可以被索引和切片,拼接
Python 字符串是固定的，列表可以改变其中的元素
>>> a = ['him', 25, 100, 'her']
>>> print(a)
['him', 25, 100, 'her']
>>> a[3] = 64  # 修改列表值
>>> cubes.append(216)  # cube列表中添加新值
>>> cubes.append(7 ** 3)  #  cube列表中添加值
>>> cubes
[1, 8, 27, 64, 125, 216, 343]
>>> # 替换一些值
>>> letters[2:5] = ['C', 'D', 'E']
>>> len(letters)
4
也可以使用嵌套列表（在列表里创建其它列表），例如：
>>> a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> x[0]
['a', 'b', 'c']
>>> x[0][1]
'b'
在序列中遍历时，索引位置和对应值可以使用 enumerate() 函数同时得到：
>>> for i, v in enumerate(['tic', 'tac', 'toe']):
...     print(i, v)
...
0 tic
1 tac
2 toe

Tuple（元组）
>>> a = (1991, 2014, 'physics', 'math')
>>> print(a, type(a), len(a))
(1991, 2014, 'physics', 'math') <class 'tuple'> 4

string、list和tuple都属于sequence（序列）。

Sets（集合）是一个无序不重复元素的集。
基本功能是进行成员关系测试和消除重复元素。
可以使用大括号 或者 set()函数创建set集合，注意：创建一个空集合必须用 set() 而不是 { }，因为{ }是用来创建一个空字典。
>>> student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'}
>>> print(student)   # 重复的元素被自动去掉
{'Jim', 'Jack', 'Mary', 'Tom', 'Rose'}
>>> 'Rose' in student  # membership testing（成员测试）
True
>>> a = set('abracadabra')

Dictionaries（字典）
字典是一种映射类型（mapping type），它是一个无序的键 : 值对集合。
关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。
在同一个字典中，关键字还必须互不相同。
>>> dic = {}  # 创建空字典
>>> tel = {'Jack':1557, 'Tom':1320, 'Rose':1886}
>>> tel
{'Tom': 1320, 'Jack': 1557, 'Rose': 1886}
>>> tel['Jack']   # 主要的操作：通过key查询
1557
>>> del tel['Rose']  # 删除一个键值对
>>> tel['Mary'] = 4127  # 添加一个键值对
>>> tel
{'Tom': 1320, 'Jack': 1557, 'Mary': 4127}
>>> list(tel.keys())  # 返回所有key组成的list
['Tom', 'Jack', 'Mary']
>>> sorted(tel.keys()) # 按key排序
['Jack', 'Mary', 'Tom']
>>> 'Tom' in tel       # 成员测试
True
>>> 'Mary' not in tel  # 成员测试
False
在字典中遍历时，关键字和对应的值可以使用 items() 方法同时解读出来：
>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
>>> for k, v in knights.items():
...     print(k, v)
...
gallahad the pure
robin the brave

>>> # Fibonacci series: 斐波纳契数列
... # 两个元素的总和确定了下一个数
... a, b = 0, 1
>>> while b < 10:
...     print(b)
...     a, b = b, a+b  #右边的表达式会在赋值变动之前执行。右边表达式的执行顺序是从左往右的。
关键字end可以被用于防止输出新的一行，或者在输出的末尾添加不同的字符：
>>> a, b = 0, 1
>>> while b < 1000:
...     print(b, end=',')
...     a, b = b, a+b
...
1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,

条件判断：在Python中没有switch – case语句
if condition_1:   #每个条件后面要使用冒号（:），表示接下来是满足条件后要执行的语句块
    statement_block_1
elif condition_2:
    statement_block_2
else:
    statement_block_3
输入转换
age = int(input("Age of the dog: "))

循环：从for或while循环中终止，任何对应的循环else块将不执行。
循环语句可以有else子句;它在穷尽列表(以for循环)或条件变为假(以while循环)循环终止时被执行,但循环被break终止时不执行
while 判断条件：
    statements
for <variable> in <sequence>:
	<statements>
else:   #编译完成后执行，break则不执行
	<statements>
>>> for i in range(5): #遍历数字序列从0到4   range(5,9) 从5到8  range(0,10,3)3为增量，0到10之间
结合range()和len()函数以遍历一个序列的索引
>>> a = ['Mary', 'had', 'a', 'little', 'lamb']
>>> for i in range(len(a)):
...     print(i, a[i])
使用range()函数来创建一个列表：
>>> list(range(5))
[0, 1, 2, 3, 4]
pass语句什么都不做。它只在语法上需要一条语句但程序不需要任何操作时使用.例如:
>>> while True:
...     pass  # 等待键盘中断 (Ctrl+C)

函数：return返回值
def  函数名（参数列表）：
    函数体
函数也可以使用 kwarg=value 的关键字参数形式被调用.
def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
parrot(1000)                                          # 1 positional argument
parrot(voltage=1000)                                  # 1 keyword argument
parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword	
最后,一个最不常用的选择是可以让函数调用可变个数的参数.这些参数被包装进一个元组(查看元组和序列).在这些可变个数的参数之前,可以有零到多个普通的参数:
def arithmetic_mean(*args):
    sum = 0
    for x in args:
        sum += x
    return sum
print(arithmetic_mean(45,32,89,78))
print(arithmetic_mean(8989.8,78787.78,3453,78778.73))
print(arithmetic_mean(45,32))
print(arithmetic_mean(45))
print(arithmetic_mean())
	
列表作栈使用：
>>> stack.append(7)
>>> stack
[3, 4, 5, 6, 7]
>>> stack.pop()
7
将列表当作队列使用 速度慢
>>> from collections import deque
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")           # Terry arrives
>>> queue.append("Graham")          # Graham arrives
>>> queue.popleft()                 # The first to arrive now leaves
'Eric'
>>> queue.popleft()                 # The second to arrive now leaves
'John'
>>> queue                           # Remaining queue in order of arrival
deque(['Michael', 'Terry', 'Graham'])
列表推导式
>>> vec = [2, 4, 6]
>>> [3*x for x in vec]
[6, 12, 18]
>>> [3*x for x in vec if x > 3]
[12, 18]
>>> [3*x for x in vec if x < 2]
[]
>>> vec1 = [2, 4, 6]
>>> vec2 = [4, 3, -9]
>>> [x*y for x in vec1 for y in vec2]
[8, 6, -18, 16, 12, -36, 24, 18, -54]
>>> [x+y for x in vec1 for y in vec2]
[6, 5, -7, 8, 7, -5, 10, 9, -3]
>>> [vec1[i]*vec2[i] for i in range(len(vec1))]
[8, 12, -54]

模块：
方法一：
>>> import fibo
>>> fibo.fib(1000)
方法二：
>>> from fibo import fib, fib2
>>> fib(500)
每个模块都有一个__name__属性，当其值是'__main__'时，表明该模块自身在运行，否则是被引入。
内置的函数 dir() 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:
>>> dir(fibo)
['__name__', 'fib', 'fib2']

在类中__开头为私有
类的专有方法：
__init__ 构造函数，在生成对象时调用
__del__ 析构函数，释放对象时使用
__repr__ 打印，转换
__setitem__按照索引赋值
__getitem__按照索引获取值
__len__获得长度
__cmp__比较运算
__call__函数调用
__add__加运算
__sub__减运算
__mul__乘运算
__div__除运算
__mod__求余运算
__pow__称方
